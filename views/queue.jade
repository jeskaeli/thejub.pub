ul(id="queue-navtabs", class="nav nav-tabs")
  li(id="queue-navtab-li", role="presentation")
    a(id="queue-navtab-a", href="#queue-tab", data-toggle='tab') Queue
  li(id="playlists-navtab-li", role="presentation")
    a(id="playlists-navtab-a", href="#playlists-tab", data-toggle='tab') Playlists
  li(id="settings-navtab-li", role="presentation", class="active")
    a(id="settings-navtab-a", href="#settings-tab", data-toggle='tab') Settings

div(id="queue-tab-content", class="tab-content")
  div(class="tab-pane" id="queue-tab")
    div(class='panel panel-default', id='queue-panel')
      table(class='table', id='queue-banner')
        tbody
          tr
            th
              input(id='select-all', type='checkbox',
                    data-toggle='tooltip', title='Select all',
                    style='visibility:hidden')
              label(for='select-all', style='font-weight: normal; display: none;'
                    id='select-all-label') Select all
            th(class='right', id='queue-buttons')
              div(class='input-group input-group-md')
                button(class='btn btn-default', type='button', id='shuffle',
                       data-toggle='tooltip', data-placement='top',
                       title='Shuffle')
                  span(id='shuffle-icon', class='glyphicon glyphicon-random')
                button(class='btn btn-default right', type='button', id='delete-track',
                       data-toggle='tooltip', data-placement='top',
                       title='Delete')
                  span(id='delete-track-icon', class='glyphicon glyphicon-remove')
                button(class='btn btn-default', type='button', id='send-to-bottom',
                       data-toggle='tooltip', data-placement='top',
                       title='Send to bottom')
                  span(id='send-to-bottom-icon', class='glyphicon glyphicon-chevron-down')
                button(class='btn btn-default left', type='button', id='send-to-top',
                       data-toggle='tooltip', data-placement='top',
                       title='Send to top')
                  span(id='send-to-top-icon', class='glyphicon glyphicon-chevron-up')

      div(class='panel-body')
        div(id='video-queue', class='jub-list')

  div(class="tab-pane" id="playlists-tab")
    div(class='panel panel-default', id='playlists-panel')
      form(class='form-inline', id='playlist-form', action='')
        table(class='table', id='playlists-banner')
          tbody
            tr
              th
                div(class='input-group input-group-md')
                  input(class='form-control', id='playlist-name-input',
                        autocomplete='off', placeholder='Save sandbox as...')
      div(class='panel-body')
        div(id='playlists', class='jub-list')

  div(class="tab-pane active" id="settings-tab")
    div(class='panel panel-default', id='settings-panel')
      div(class='panel-body')
        input(id='requeue-videos', type='checkbox')
        label(for='requeue-videos') Requeue videos when they finish

script.

  var my_queue = [];
  var my_playlists = [];
  var prefs_selected_playlist = null;

  // TODO
  //   When drawing playlists, make sure sandbox is always at the top
  //   Save playlist selection in user preferences; default to sandbox, and change it
  //   when people click the radio buttons, and when saving a new playlist, change it
  //   to the new playlist.
  //   Also make server send user preferences message on user load (instead of using
  //   a client callback)
  //   Change rotate_videos so that it reads from the top of the current playlist
  //   Change video rotation so that it doesn't pop videos off of playlists
  //   Add button to delete playlist
  //   Maybe make omnibox simply "rename", and add a "create new playlist" button. yes

  function selected_playlist_name() {
    return $('#playlists li input[name=playlist-radios]:checked').prop('value');
  }

  function selected_playlist() {
    var name = selected_playlist_name();
    if (name) {
      return _.find(my_playlists, function(pl) { return pl.name == name });
    }
  }

  function update_queue_buttons() {
    var dur = 100;
    if ($('#video-queue li input:checkbox:checked').length > 0) {
      $('#delete-track').fadeIn(dur);
      $('#send-to-top').fadeIn(dur);
      $('#send-to-bottom').fadeIn(dur);
    } else {
      $('#delete-track').fadeOut(dur);
      $('#send-to-top').fadeOut(dur);
      $('#send-to-bottom').fadeOut(dur);
    }
  }

  function update_select_all() {
    if ($('#video-queue li input:checkbox').length > 0) {
      $('#select-all').css('visibility', 'visible');
      $("label[for='select-all']").show();
    } else {
      $('#select-all').css('visibility', 'hidden');
      $("label[for='select-all']").hide();
    }
    $('#select-all').prop('checked', false);
    $('#select-all-label').text(
      'Select all (' + selected_playlist().videos.length + ')'
      );
  }

  function selected_tracks() {
    var indices = [];
    var boxes = $('#video-queue li input:checkbox');
    boxes.each(function(i,v) {
      if (v.checked) {
        indices.push(i);
      }
    });
    return indices;
  }

  // shift + click http://4pcbr.com/topic/grouped_checkboxes_select_with_shift__click
  function setup_shift_click() {
    var _last_selected = null;
    var checkboxes = $( "#video-queue li input:checkbox" );

    checkboxes.click( function( e ) {
      var ix = checkboxes.index( this );
      var checked = this.checked;
      if ( e.shiftKey && ix != _last_selected ) {
        checkboxes.slice( Math.min( _last_selected, ix ), Math.max( _last_selected, ix ) )
         .each( function() { this.checked = checked });
        _last_selected = null;
      } else { _last_selected = ix }
    })
  }

  $('#queue-navtabs a').click(function (e) {
    $(this).tab('show');
    if (e.currentTarget.id == 'queue-navtab-a') {
      $('#video-queue').trigger('redraw');
    }
  })

  $('#requeue-videos').click(function (e) {
    var data = { requeueVideos: this.checked };
    socket.emit('user update preferences', get_username(), data);
  });

  // TODO include the number of videos and the duration
  function new_playlist_li(playlist_name) {
    var li = $('<li>').addClass('playlist-item');
    //var lbl = $('<label>')
    var name_span = $('<span>').addClass('playlist-name');
    name_span.append(document.createTextNode(playlist_name));
    var radio = $('<input>').addClass('playlist-radio');
    radio.attr({
      type: 'radio',
      name: 'playlist-radios',
      value: playlist_name
    });
    li.append(radio);
    li.append(name_span);
    return li;
  }

  function new_queue_li(video_obj, title_width) {
    var li = $('<li>').addClass('queue-item');
    var title_span = $('<span>').addClass('track');
    var time_span = $('<span>').addClass('duration');
    var chk = $('<input>').attr('type', 'checkbox').addClass('queue-chk')

    // Set initial checkbox state.
    chk.val($(this).is(':checked'));

    // The 'delete' and 'send to top' buttons only appear if a track is selected
    chk.change(update_queue_buttons);

    li.append(chk)
    li.append(title_span);
    li.append(time_span);

    var tformat = (video.duration / 1000) >= 3600 ? '%k:%M:%S' : '%M:%S';
    time = new Date(1970, 1, 1); // Unix epoch
    time.setSeconds(video.duration / 1000);
    time_span.text('(' + strftime(tformat, time).trim() + ')');

    title_span.text(video.title);

    title_span.truncate({
        width: title_width,
        token: '...',
        side: 'right',
        multiline: false
    });

    return li;
  }

  // Redraw queue, taking into account the current width of the list
  $('#video-queue').bind('redraw',function() {
    // 84 = 55 + 13 + 4 + 4 + 5 + 3
    // = duration width + checkbox width + checkbox padding + title margin-right + padding.
    // Can't read this from the page because the elements aren't on the
    // DOM yet. Need to compute this and truncate after everything is drawn.
    // TODO ^ use _.defer?
    // That will also solve #87.
    var pad = 84;
    var title_width = $(this).width() - pad;

    // if scrolling, add some more padding
    if (this.scrollHeight > $(this).height()) {
      title_width -= scrollbar_width(); // TODO seems to need a bit more
    }

    $(this).empty();
    var videos = (selected_playlist() || {}).videos || [];
    videos = _.sortBy(videos, 'position').reverse();
    for (video of videos) {
      var item = new_queue_li(video, title_width);
      $(this).prepend(item);
    }

    update_select_all();

    setup_shift_click();
  });

  // Redraw playlists, taking into account the current width of the list
  // TODO mostly copied from redraw queue
  $('#playlists').bind('redraw',function() {
    var pad = 84;
    var title_width = $(this).width() - pad;

    // if scrolling, add some more padding
    if (this.scrollHeight > $(this).height()) {
      title_width -= scrollbar_width(); // TODO seems to need a bit more
    }

    $(this).empty();
    for (playlist of my_playlists) {
      var item = new_playlist_li(playlist.name);
      $(this).prepend(item);
    }
    console.log($('#playlists li input'));
    var selected;
    var playlists = $('#playlists li input');
    if (prefs_selected_playlist) {
      selected = $(playlists).filter(function() {
        return this.value == prefs_selected_playlist
      });
    }
    if (!selected) {
      selected = playlists[0];
    }
    console.log('selected', selected);
    $(selected).prop('checked', true)
  });

  // playlists is an object keyed by playlist name
  function update_playlists(playlists) {
    if (playlists) {
      my_playlists = playlists;
      console.log('updating playlists', playlists);
      $('#playlists').trigger('redraw');
      $('#video-queue').trigger('redraw');
      update_select_all();
      update_queue_buttons();
    }
  };

  // TODO this needs to get called on user load
  socket.on('preferences', function(preferences) {
    console.log('received prefs', preferences);
    if (_.has(preferences, 'selectedPlaylist')) {
      prefs_selected_playlist = preferences.selectedPlaylist;
      $('#playlists').trigger('redraw');
    }
  });

  // Server tells us our list of playlists
  socket.on('playlists', function(playlists) {
    update_playlists(playlists);
  });

  // Save sandbox as new playlist
  $('#playlist-form').submit(function() {
    var new_playlist_name = $('#playlist-name-input').val();
    var user = get_username();

    if (user == '') {
      alert('You must be logged in to save playlists.')
    } else {
      console.log('saving sandbox as playlist', new_playlist_name);
      socket.emit('save sandbox as', user, new_playlist_name);
      $('#playlist-name-input').val('');
    }
    return false;
  });


  // Select all
  $('#select-all').on('click', function(e) {
    var that = this;
    $( "#video-queue li input:checkbox" )
      .each( function() { this.checked = that.checked });
    update_queue_buttons();
  });

  // Shuffle
  $('#shuffle').on('click', function(e) {
    socket.emit('shuffle', get_username(), selected_playlist_name());
    return false;
  });

  // Delete track(s)
  $('#delete-track').on('click', function(e) {
    socket.emit('delete tracks', get_username(), selected_playlist_name(),
                selected_tracks());
    return false;
  });

  // Send track(s) to top
  $('#send-to-top').on('click', function(e) {
    socket.emit('send to top', get_username(), selected_playlist_name(),
                selected_tracks());
    return false;
  });

  // Send track(s) to bottom
  $('#send-to-bottom').on('click', function(e) {
    socket.emit('send to bottom', get_username(), selected_playlist_name(),
                selected_tracks());
    return false;
  });

  $( document ).ready(function() {
    // Document is loaded so we can ask for our playlists.
    var user = get_username();
    socket.emit('playlists', user);
    $('#queue-navtab-a').click();
    update_queue_buttons();
  });

