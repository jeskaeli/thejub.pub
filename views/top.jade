nav(class='navbar navbar-inverse navbar-fixed-top' id='top-nav')
  form(class='navbar-form form-group navbar-left',
       id='load_video', action='')

    div(class='input-group input-group-md')
      span(class='input-group-btn jub-nav-top-item')
        button(class='btn btn-default', type='button', id='join-dj',
               data-toggle='tooltip', data-placement='top',
               title='Click to DJ')
          span(id='join-dj-icon', class='glyphicon glyphicon-user')
      input(class='form-control jub-nav-input jub-nav-top-item', id='omnibox',
            style='width:300px; margin-right:10px; margin-left:5px;',
            placeholder='Search / video or playlist ID / URL')
      span(class='input-group-btn jub-nav-top-item')
        button(class='btn btn-default', type='button', id='enqueue',
               data-toggle="tooltip",
               data-placement="bottom", title="Add to queue")
          span(id='enqueue-icon', class='glyphicon glyphicon-import')
        button(class='btn btn-default', type='button', id='dequeue',
               data-toggle='tooltip',
               data-placement='bottom', title='Remove last video')
          span(id='dequeue-icon', class='glyphicon glyphicon-export')
        button(class='btn btn-default',type='button',
               id='skip', data-toggle='tooltip',
               data-placement='bottom', title='Skip')
          span(id='skip-icon', class='glyphicon glyphicon-fast-forward')
        button(class='btn btn-default',type='button',
               id='mute', data-toggle='tooltip',
               data-placement='bottom', title='Mute')
          span(id='mute-icon', class='glyphicon glyphicon-volume-up')
        button(class='btn btn-default',type='button',
               id='toggle-image', data-toggle='tooltip',
               data-placement='bottom', title='Hide Inline Images')
          span(id='toggle-image-icon', class='glyphicon glyphicon-eye-open')

  ul(class='nav navbar-nav navbar-right')
    // Username
    li(class='jub-nav-top-item')
      form(class='navbar-form form-group', id='auth', action='')
        input(class='form-control jub-nav-input jub-nav-top-item', id='username',
              style='margin:0 50px 10px 0;',
              placeholder='User name', autocomplete='off')
    // Title
    li
      p(class='navbar-text', id='title', style='font-size:36px;')= title


include ./username.jade

script.

  var MAX_RESULTS = 7;
  var MAX_PRETTY_LEN = 60;
  var djing = false;
  var image_cookie_key = 'hide-inline-images';

  //TODO: load the controls and player in a deliberate order so one can reflect the other's mute state
  $( document ).ready(function() {
    draw_mute_state();
    draw_show_inline_image_state();
  });

  function draw_mute_state() {
    var is_muted = get_cookie('muted');
    if (is_muted == 1) {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-off');
      $('#mute').attr('title', 'Unmute');
    } else {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-up');
      $('#mute').attr('title', 'Mute');
    }
  }
  function draw_show_inline_image_state() {
    var hide_inline_image = get_cookie(image_cookie_key);
    if (hide_inline_image == 1) {
      $('#toggle-image-icon').attr('class', 'glyphicon glyphicon-eye-close');
      $('#toggle-image').attr('title', 'Show Inline Images');
    } else {
      $('#toggle-image-icon').attr('class', 'glyphicon glyphicon-eye-open');
      $('#toggle-image').attr('title', 'Hide Inline Images');
    }
  }

  function draw_dj_state() {
    var elem = $('#join-dj');
    if (djing) {
      elem.css('background', '#2DB85A');
      elem.css('color', '#000');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-headphones');
      $('#join-dj').attr('title', 'Stop DJing');
    } else {
      elem.css('background', '#3F2C52');
      elem.css('color', '#FFFFFF');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-user');
      $('#join-dj').attr('title', 'Click to DJ');
    }
  }

  // e.g. "michelleheafy: Some cool video about someth..."
  function prettify_result(result) {
    var artist = result.snippet.channelTitle
    var pretty = artist + ": " + result.snippet.title;
    if (pretty.length > MAX_PRETTY_LEN) {
      pretty = pretty.slice(0, MAX_PRETTY_LEN - 3) + "...";
    }
    return pretty
  }

  // Take in youtube search result items and turn them into an array of objects
  // that autocomplete can handle, truncating the list in the process
  function transform_search_results(results) {
    return results.slice(0, MAX_RESULTS).map(function(result) {
      return {
        label: prettify_result(result),
        value: result.id.videoId
      }
    });
  }

  $('#omnibox').autocomplete({
    // Request a video search; once the results come back, update the UI
    source: function(request, response) {
      console.log('searching for', request.term);
      youtube_video_search(request.term, function(items) {
        response(transform_search_results(items));
      })
    },

    // Don't change the value of the search box while user is choosing
    focus: function(event, ui) {
      return false;
    },

    // When a user chooses a suggestion (hits enter) start the video
    select: function(event, ui) {
      var event = $.Event("submit");
      event.video_id = ui.item.value;
      $('#load_video').trigger(event);
      return false;
    },
    minLength: 5,
    delay: 300,
  });

  // Client text box for submitting a video
  $('#load_video').submit(function(event) {
    // We might have been invoked straight from an autocomplete callback,
    // in which case the value of the search box is not the video id; the
    // video id was passed in with the event.
    var id = event.video_id;
    var user = get_cookie('username');
    var pl_name = selected_playlist_name();
    if (!pl_name) {
      console.error('no playlist selected (this should never happen)');
      return;
    }

    // We were invoked via a normal form submit
    if (id == undefined) {
      id = $('#omnibox').val();
    }

    // Accept video URLs
    if (id.starts_with('https:\/\/www.youtube.com')) {
      console.log('user entered url');
      // TODO do we have regex?
      if (id.indexOf('youtube.com\/watch') > 0) {
        console.log('user entered video');
        id = id.split('watch?v=')[1];
      } else if (id.indexOf('youtube.com\/playlist') > 0) {
        console.log('user entered playlist');
        id = id.split('playlist?list=')[1];
      }
    }

    // We've obtained the ID (either a playlist or video ID)
    if (id.length > 11) {
      var count = 0;
      var done = false;
      $('#omnibox').val('');
      var wait_for_playlist = function() {
        if (!done) {
          $('#omnibox').val($('#omnibox').val() + '.');
          setTimeout(wait_for_playlist, 300);
        }
      }
      setTimeout(wait_for_playlist, 300);
      youtube_playlist(id, function(video_list) {
        done = true;
        for (video of video_list) {
          video.user = user;
          youtube_video_specs(video, function(obj) {
            if (!(obj.title && obj.duration && user)) {
              console.log('failed to find info for video', video.id);
            }
            count += 1;
          });
        }

        // Periodically see if we're done fetching info for all the videos.
        // Once we are, sort them and update the client's queue.
        var wait_for_specs = function() {
          if (count == video_list.length) {
            console.log('yay! done fetching all video infos. sorting...');

            // Sort by 'position', in place
            video_list.sort(function(a, b) {
              if (a.position <= b.position) { return -1; } else { return 1; }
            });
            console.log('emitting to videos enqueue');
            socket.emit('videos enqueue', user, pl_name, video_list);
            $('#omnibox').val('');
          } else {
            $('#omnibox').val($('#omnibox').val() + '.');
            setTimeout(wait_for_specs, 300);
          }
        }
        wait_for_specs();
      });
    } else {
      // Not a playlist; it's a video. Submit it.
      var video_obj = {
        user: get_cookie('username'),
        id: id
      }
      youtube_video_specs(video_obj, function(result_obj) {
        if (result_obj.title && result_obj.duration) {
          console.log('submitting video', result_obj);
          socket.emit('video enqueue', user, pl_name, result_obj);
          $('#omnibox').val('');
        } else {
          console.log('failed to find info for video', result_obj.id);
        }
      });
    }
    return false;
  });

  // Enqueue
  $('#enqueue').on('click', function(e) {
    var user = get_cookie('username');
    console.log('sending enqueue for:', user);
    var event = $.Event("submit");
    event.video_id = $('#omnibox').val();
    $('#load_video').trigger(event);
    return false;
  });

  // Dequeue
  $('#dequeue').on('click', function(e) {
    var user = get_cookie('username');
    console.log('sending dequeue for:', user);
    socket.emit('video dequeue', user);
    return false;
  });

  // Skip
  $('#skip').on('click', function(e) {
    var user = get_cookie('username');
    socket.emit('video skip', user);
    return false;
  });

  // Mute button
  $('#mute').on('click', function(e) {
    e.preventDefault();
    if (player.isMuted()) {
      player.unMute();
      set_cookie('muted', 0);
    } else {
      player.mute();
      set_cookie('muted', 1);
    }
    draw_mute_state();
    return false;
  });
  // Toggle button
  $('#toggle-image').on('click', function(e) {
    e.preventDefault();
    if (get_cookie(image_cookie_key) == 1) {
      set_cookie(image_cookie_key, 0);
    } else {
      set_cookie(image_cookie_key, 1);
    }
    draw_show_inline_image_state();
    return false;
  });
  // DJ button
  $('#join-dj').on('click', function() {
    if (!djing) {
      socket.emit('add dj', get_username());
      console.log("add dj");
      djing = true;
    } else {
      socket.emit('remove dj', get_username());
      console.log("remove dj");
      djing = false;
    }
    draw_dj_state();
  });

  // Some other part of the page wants to set the DJ state
  $('#join-dj').on('set-dj-state', function(e, new_state) {
    console.log('dj-state', new_state);
    djing = new_state;
    draw_dj_state();
  });
